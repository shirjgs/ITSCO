/* Generated By:JavaCC: Do not edit this line. Parser.java */
package edu.itsco;
import java.util.ArrayList;

public class Parser implements ParserConstants {
  public static ArrayList<Variable> ListaVariables;

  public static void main(String args []) throws ParseException, SemanticException
  {
    ListaVariables = new ArrayList<Variable>();
    Parser parser = new Parser(System.in); //Datos desde el teclado.        System.out.println("Bienvenido(a)");
        System.out.println("Vamos a comenzar :3");
        parser.main();
        System.out.println("Compilo exitosamente.");
  }

  private static void ingresarVariable(Variable v) throws SemanticException
  {
    if(ListaVariables.contains(v))
    {
      throw new SemanticException(v, SemanticException.VD);
    }
    else
    {
    ListaVariables.add(v);
        }
  }

  private static void estaVariable(String Id) throws SemanticException
  {
        Variable v = new Variable();
        v.setId(Id);
        if(!ListaVariables.contains(v)) {
          throw new SemanticException(v,SemanticException.VND);
        }
  }

  static final public void main() throws ParseException, SemanticException {
    jj_consume_token(start);
    jj_consume_token(id);
    label_1:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case var:
      case input:
      case output:
      case yes:
      case select:
      case from:
      case perform:
      case aslongas:
      case id:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(finish);
  }

  static final public void sentencias() throws ParseException, SemanticException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case var:
      variable();
      break;
    case input:
      write();
      break;
    case output:
      read();
      break;
    case id:
      asignacion();
      break;
    case yes:
      si();
      break;
    case select:
      select();
      break;
    case from:
      from();
      break;
    case aslongas:
      aslongas();
      break;
    case perform:
      perform();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void variable() throws ParseException, SemanticException {
  Token TD;
  Token identificador;
  boolean inicial = false;
    jj_consume_token(var);
    identificador = jj_consume_token(id);
    TD = tipodato();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case igu:
      jj_consume_token(igu);
      valor();
                                                                           inicial = true;
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
                Variable var = new Variable(identificador.image, TD.image);
                var.setInicializada(inicial);
                ingresarVariable(var);
  }

  static final public Token tipodato() throws ParseException {
  Token TD;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ent:
      TD = jj_consume_token(ent);
      break;
    case cad:
      TD = jj_consume_token(cad);
      break;
    case flo:
      TD = jj_consume_token(flo);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return TD;}
    throw new Error("Missing return statement in function");
  }

  static final public void valor() throws ParseException, SemanticException {
        Token Id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case vent:
      jj_consume_token(vent);
      break;
    case vcad:
      jj_consume_token(vcad);
      break;
    case vflo:
      jj_consume_token(vflo);
      break;
    case id:
      Id = jj_consume_token(id);
                estaVariable(Id.image);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void write() throws ParseException, SemanticException {
    jj_consume_token(input);
    jj_consume_token(pa);
    valor();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case sum:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(sum);
      valor();
    }
    jj_consume_token(pc);
  }

  static final public void read() throws ParseException, SemanticException {
        Token Id;
    jj_consume_token(output);
    jj_consume_token(pa);
    Id = jj_consume_token(id);
    jj_consume_token(pc);
                estaVariable(Id.image);
  }

  static final public void asignacion() throws ParseException, SemanticException {
        Token Id;
    Id = jj_consume_token(id);
    jj_consume_token(igu);
    simple();
                estaVariable(Id.image);
  }

  static final public void simple() throws ParseException, SemanticException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case id:
    case vent:
    case vflo:
    case vcad:
      valor();
      break;
    case pa:
      parentesis();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case sum:
      case res:
      case mul:
      case div:
      case mod:
      case pot:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      aritmetico();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case id:
      case vent:
      case vflo:
      case vcad:
        valor();
        break;
      case pa:
        parentesis();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void parentesis() throws ParseException, SemanticException {
    jj_consume_token(pa);
    simple();
    jj_consume_token(pc);
  }

  static final public void aritmetico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case sum:
      jj_consume_token(sum);
      break;
    case res:
      jj_consume_token(res);
      break;
    case mul:
      jj_consume_token(mul);
      break;
    case div:
      jj_consume_token(div);
      break;
    case mod:
      jj_consume_token(mod);
      break;
    case pot:
      jj_consume_token(pot);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void si() throws ParseException, SemanticException {
    jj_consume_token(yes);
    condicion();
    jj_consume_token(so);
    label_4:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case var:
      case input:
      case output:
      case yes:
      case select:
      case from:
      case perform:
      case aslongas:
      case id:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ifno:
      jj_consume_token(ifno);
      label_5:
      while (true) {
        sentencias();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case var:
        case input:
        case output:
        case yes:
        case select:
        case from:
        case perform:
        case aslongas:
        case id:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(finish);
    jj_consume_token(yes);
  }

  static final public void condicion() throws ParseException, SemanticException {
    facil();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case and:
      case or:
      case not:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      logico();
      facil();
    }
  }

  static final public void facil() throws ParseException, SemanticException {
    valor();
    relacional();
    valor();
  }

  static final public void logico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case and:
      jj_consume_token(and);
      break;
    case or:
      jj_consume_token(or);
      break;
    case not:
      jj_consume_token(not);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void relacional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case may:
      jj_consume_token(may);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case igu:
        jj_consume_token(igu);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      break;
    case men:
      jj_consume_token(men);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case igu:
        jj_consume_token(igu);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      break;
    case igu:
      jj_consume_token(igu);
      jj_consume_token(igu);
      break;
    case not:
      jj_consume_token(not);
      jj_consume_token(igu);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void select() throws ParseException, SemanticException {
    jj_consume_token(select);
    jj_consume_token(pa);
    jj_consume_token(id);
    jj_consume_token(pc);
    label_7:
    while (true) {
      jj_consume_token(option);
      jj_consume_token(vent);
      jj_consume_token(ps);
      sentencias();
      jj_consume_token(breakup);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case option:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_7;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case defect:
      jj_consume_token(defect);
      jj_consume_token(ps);
      sentencias();
      jj_consume_token(breakup);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(finish);
    jj_consume_token(select);
  }

  static final public void from() throws ParseException, SemanticException {
    jj_consume_token(from);
    jj_consume_token(id);
    jj_consume_token(igu);
    jj_consume_token(vent);
    jj_consume_token(to);
    jj_consume_token(vent);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case var:
      case input:
      case output:
      case yes:
      case select:
      case from:
      case perform:
      case aslongas:
      case id:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_8;
      }
      sentencias();
    }
    jj_consume_token(next);
  }

  static final public void aslongas() throws ParseException, SemanticException {
    jj_consume_token(aslongas);
    jj_consume_token(pa);
    condicion();
    jj_consume_token(pc);
    label_9:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case var:
      case input:
      case output:
      case yes:
      case select:
      case from:
      case perform:
      case aslongas:
      case id:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_9;
      }
    }
    jj_consume_token(finish);
    jj_consume_token(aslongas);
  }

  static final public void perform() throws ParseException, SemanticException {
    jj_consume_token(perform);
    label_10:
    while (true) {
      sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case var:
      case input:
      case output:
      case yes:
      case select:
      case from:
      case perform:
      case aslongas:
      case id:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_10;
      }
    }
    jj_consume_token(finish);
    jj_consume_token(aslongas);
    jj_consume_token(pa);
    condicion();
    jj_consume_token(pc);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1913c00,0x1913c00,0x0,0x380,0x0,0x2000000,0x0,0x7e000000,0x0,0x7e000000,0x1913c00,0x1913c00,0x4000,0x0,0x0,0x0,0x0,0x80000000,0x20000,0x40000,0x1913c00,0x1913c00,0x1913c00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x400,0x400,0x2,0x0,0x3c00,0x0,0x3c20,0x0,0x3c20,0x0,0x400,0x400,0x0,0x1c,0x1c,0x2,0x2,0x13,0x0,0x0,0x400,0x400,0x400,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
