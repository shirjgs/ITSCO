/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(Parser)package edu.itsco;
import java.util.ArrayList;

public class Parser{
  public static ArrayList<Variable> ListaVariables;
    public static void main(String args []) throws ParseException, SemanticException  {
    ListaVariables = new ArrayList<Variable>();    Parser parser = new Parser(System.in); //Datos desde el teclado.	System.out.println("Bienvenido(a)");
	System.out.println("Vamos a comenzar :3");
	parser.main();
	System.out.println("Compilo exitosamente.");
  }

  private static void ingresarVariable(Variable v) throws SemanticException
  {
    if(ListaVariables.contains(v))
    {
      throw new SemanticException(v, SemanticException.VD); 
    }
    else
    { 
    ListaVariables.add(v);
  	}
  }

  private static void estaVariable(String Id) throws SemanticException
  {	Variable v = new Variable();
	v.setId(Id);
	if(!ListaVariables.contains(v)) {
	  throw new SemanticException(v,SemanticException.VND);
	}
  }}PARSER_END(Parser)SKIP :{  " "| "\r"| "\t"| "\n"}

//DENIFICION DE PALABRAS RESERVADAS.
TOKEN:
{
  < start: "start" >
| < finish: "finish" >

//Tipos de datos.
| < ent: "ent" > //entero
| < cad: "cad" > //cadena
| < flo: "flo" > //flotante

//Definir variables
| < var: "var" > //variables

//Escribir y leer datos desde el teclado. 
| < input: "input" > //Entrada. Imprimirá el mensaje en la pantalla.
| < output: "output" > //Salida. Captura desde el teclado.

//SENTENCIAS DE CONTROL

//if
| < yes: "yes" > //si
| < ifno: "ifno" > //sino
| < so: "so" > //entonces

//Switch
| < select: "select" >
| < option: "option" >
| < defect: "defect" >
| < breakup: "breakup" >

//for
| < from: "from" >
| < to: "to" >
| < next: "next" >

//while
| < perform: "perform" > //hacer
| < aslongas: "aslongas" >  //mientras
}

//AREA DE OPERADORES
TOKEN: {
  < sum: "+" >
| < res: "-" >
| < mul: "*" >
| < div: "/" >
| < mod: "%" >
| < pot: "^" >

| < may: ">" >
| < men: "<" >
| < igu: "=" >

| < and: "&&" >
| < or:  "||" >
| < not: "!" >

| < pa: "(" >
| < pc: ")" >

| < ps: ":" >
	
}

//AREA DE TOKENS DINÁMICOS.
TOKEN:
{
   <#lyrics: ["a"-"z", "A"-"Z"]>
 | <#number: ["0"-"9"]>

 | <id: (<lyrics>| "_") (<lyrics> | <number> | "_")*>

 | <vent: (<number>)+> //vent: valor entero. 
 | <vflo: (<number>)+ "." (<number>)+> //vflo: valor flotante.
 | <vcad: "\""(~["\""])* "\""> //vcad: valor cadena.
 
}

void main() throws SemanticException: { }
{
  < start > <id >
	(
	  sentencias()	)+
  < finish >
}

void sentencias() throws SemanticException: { }
{
  variable()
| write()
| read()
| asignacion()
| si()
| select()
| from()
| aslongas()
| perform()
}

void variable() throws SemanticException: {
  Token TD;
  Token identificador;
  boolean inicial = false;
}
{
	< var > identificador = < id > TD = tipodato() [ < igu > valor() { inicial = true; } ]
	{
		Variable var = new Variable(identificador.image, TD.image);
		var.setInicializada(inicial);
		ingresarVariable(var);
	}
}
  
Token tipodato(): {
  Token TD;
}
{
  (    
	TD = < ent > | TD = < cad > | TD = < flo >
  )
  {
    return TD;
  }
}

void valor() throws SemanticException: {
	Token Id;
}
{
	< vent > | < vcad > | < vflo > | Id = < id >
	{
		estaVariable(Id.image);
	}
}

void write() throws SemanticException: { }
{
	< input > < pa > valor() (< sum > valor() )* < pc >
}

void read() throws SemanticException: {
	Token Id;
}
{
	< output > < pa > Id = < id > < pc >
	{
		estaVariable(Id.image);
	}
}

void asignacion() throws SemanticException: {
	Token Id;
}
{
	Id = < id > <igu > simple()
	{
		estaVariable(Id.image);
	}
}

void simple() throws SemanticException: { }
{
	( valor() | parentesis() )
	( aritmetico() (valor() | parentesis()) )*
} 

void parentesis() throws SemanticException: { }
{
	< pa > simple() <pc >
}

void aritmetico(): { }
{
	< sum > | < res > | < mul > | < div > | < mod > | < pot >
}

void si() throws SemanticException: { } //if
{
	< yes > condicion() < so >
	( sentencias() )+
	[< ifno > (sentencias())+ ]
	< finish > <yes >
}

void condicion() throws SemanticException: {}
{
  facil() ( logico() facil() )*
}

void facil() throws SemanticException: {}
{
  valor() relacional() valor()
}

void logico(): { }
{
	< and > | < or > | < not >
}

void relacional(): { }
{
	< may > [< igu >] | < men > [ < igu > ] | < igu > <igu > | < not > <igu >
}

void select() throws SemanticException: {} //switch
{
  < select > < pa > < id > < pc >
  ( < option > < vent > < ps > sentencias() < breakup > )+  [ < defect > < ps > sentencias() < breakup >]
  < finish > < select >
}

void from() throws SemanticException: { } //for
{
	< from > < id > < igu > < vent > < to > < vent > ( sentencias() )* < next >
}

void aslongas() throws SemanticException: { } //while
{
  < aslongas > < pa > condicion() < pc > ( sentencias() )+ < finish > < aslongas >
}

void perform() throws SemanticException: { } //do while
{
  < perform > ( sentencias() )+ < finish > < aslongas > < pa > condicion() < pc >
}



